##
# this is an EXAMPLE config
# it is designed to provide insight
# it SHOULD NOT be used as is
##
# indentation should NOT be used
##

repo_name="example"
# used with push(); projects are saved to "$push_path/repo/$repo_name"
# determined with ${PWD##*/} if repo_name is unset

hooks_enabled="grab,init,revi,push,pull"
# defaults to grab,init,revi,push,pull
# additional items can be added
# allowing for hooks within plugins
# TODO

grab_replace=""
# set to call $grab_replace instead of grab()
# hooks will still activate
# useful with plugins
# this is present for all main commands
# TODO

grab_path=""
# defaults to $push_path
# detected via cli automatically
# but can be manually set for odd configurations
# TODO

config_hidden="false"
# when init is run a config is generated at ./.rsh.conf
# set config_hidden to false to generate ./rsh.conf instead
# plugins should use ./${config_hidden}rsh.conf for the local config
# $config_hidden is redefined by cl() to `.` if true
# IMPLEMENTED

db_file=""
# set db_file if you wish to use a separate file for storing db_items
# large projects will have large databases and thus
# having the db inside the local rsh.conf may be annoying
# TODO
# it may be better to add an include keyword but thats for another time

db_findHidden=""
# set to cause db() to always search for hidden files
# by default db() ignores hidden files
# note that issues may arise due to hidden git files
# TODO

db_extras=""
# this can be used instead of the above to avoid its issues
# db_extras is always checked and is automatically set to include some items
# like .rsh.conf
# db_extras should ONLY contain single files
# folders/directories should NOT be added as they will not operate properly with curl
# IMPLEMENTED

init_pre="hook"
init_post="hook"
# $init_pre would run before init and $init_post after
local_version=""
# set in local project configs & remote configs
# used heavily for preventing data loss
# TODO
# should be set everytime config_edit interacts with conf file
# and bail if the orig value and the new value have known conflicts

push_path=""
# $push_path should be where the server is mounted
# useful for FE integration
# MUST be an aboslote path
# IMPLEMENTED

#push_ready
# $push_ready is used internally only
# should either be empty, 1 or optionally 0
# IMPLEMENTED

#latest=""
# this should only be set inside of the config from
# $remote_latest (see below)
# setting this inside the local config may cause issues

remote_latest=""
# this should be used when ln(1)
# is not present and linking to latest cannot occur
# this should contain 2 items using a comma delimiter
# 1: url
## a url to a config file specifing what the latest version is
# 2: path
## a path to a config to write remote_latest to on push() rather than using ln(1)
# this path and url should be present outside of $PROJECT_PATH
# such that old and new versions will both be able to find the latest version
##
# ie remote_latest="https://r.transcendent.ink/latest-configs/rsh.conf,/media/SD/rsh/repos/latest-configs/rsh.conf"
##
# this is the approach I would use
# here files at /media/SD/rsh ($push_path)
# are directly hosted by nginx on r.transcendent.ink
# and any changes to the will automatically change the contents of the remote file
# this is achived with sshfs

remote_url=""

# this is used by pull
# pull() should check the url present here
## however it should first check in $push_path if $repo_name is present
## if it is, pull from $push_path instead
# and load the config from latest
# check if the current version and latest differ
# and then download all files should they differ
# then generate a new database and alert the user/dev
# should these databases differ

## $remote_url must have the protocol already specified with ://
# ie https:// is https/ssl/tls


plugin_var=ex
# cl() should parse this such that $plugin_var is ex
